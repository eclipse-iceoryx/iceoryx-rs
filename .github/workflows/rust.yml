name: Build & Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  pre-flight-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt
    - name: Check formatting
      run: cargo fmt --check

  # TODO refactor this to a custom action in .github/actions and also use it for the grcov job
  cargo-nextest:
    needs: pre-flight-check
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest] #Todo add windows-latest

    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cache-1-${{ runner.os }}-cargo-nextest
    - name: Install cargo-nextest
      run: |
        cargo-nextest --version > /dev/null || cargo install cargo-nextest --locked
        cargo-nextest --version
    - name: Upload cargo-nextest artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-cargo-nextest
        path: ~/.cargo/bin/cargo-nextest
        retention-days: 00

  grcov:
    needs: pre-flight-check
    runs-on: ubuntu-latest
    steps:
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
        override: true
        components: llvm-tools-preview
    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cache-1-${{ runner.os }}-grcov
    - name: Install grcov
      run: |
        grcov --version > /dev/null || cargo install grcov
        grcov --version
    - name: Upload grcov artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-grcov
        path: ~/.cargo/bin/grcov
        retention-days: 00

  build-test:
    needs: cargo-nextest
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest] #Todo add windows-latest
        toolchain: [stable, beta]
        include:
        - os: ubuntu-latest
          toolchain: nightly

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.toolchain != 'stable' }}

    steps:
    - uses: actions/checkout@v3
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        profile: minimal
        override: true
        components: clippy
    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cache-1-${{ runner.os }}-toolchain-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.toml', '**/build.rs') }}
    - name: Download cargo-nextest artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ runner.os }}-cargo-nextest
        path: ~/.cargo/bin
    - name: Make cargo-nextest artifact executable
      run: |
        chmod +x ~/.cargo/bin/cargo-nextest
    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install -y libacl1-dev
        fi
    - name: Build
      run: cargo build --all --examples
    - if: runner.os == 'Linux' && matrix.toolchain == 'stable'
      name: Run clippy # clippy can reuse the previous build artifacts
      run: cargo clippy
    - name: Run tests
      run: cargo nextest run --test-threads 1

  coverage:
    needs: [cargo-nextest, grcov]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
        override: true
        components: llvm-tools-preview
    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: coverage-llvm-tools-preview-cache-1-${{ runner.os }}-toolchain-nightly-${{ hashFiles('**/Cargo.toml', '**/build.rs') }}
    - name: Download artifact cargo-nextest
      uses: actions/download-artifact@v3
      with:
        name: ${{ runner.os }}-cargo-nextest
        path: ~/.cargo/bin
    - name: Download artifact grcov
      uses: actions/download-artifact@v3
      with:
        name: ${{ runner.os }}-grcov
        path: ~/.cargo/bin
    - name: Make cargo-nextest and grcov artifacts executable
      run: |
        chmod +x ~/.cargo/bin/cargo-nextest
        chmod +x ~/.cargo/bin/grcov
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y libacl1-dev
    - name: Build
      env:
        RUSTFLAGS: -Cinstrument-coverage
      run: cargo build
    - name: Run test
      env:
        LLVM_PROFILE_FILE: target/debug/llvm-profile-files/iceoryx-rs-%p-%m.profraw
        RUSTFLAGS: -Cinstrument-coverage
      run: cargo nextest run --test-threads 1
    - name: Generate coverage results for html artifacts
      run: |
        grcov                                               \
          target/debug/llvm-profile-files                   \
          iceoryx-sys/target/debug/llvm-profile-files       \
          --binary-path target/debug                        \
          --source-dir .                                    \
          --output-type html                                \
          --branch                                          \
          --ignore-not-existing                             \
          --ignore "examples/*"                             \
          --ignore "iceoryx-sys/build.rs"                   \
          --ignore "iceoryx-sys/src/roudi_environment.rs"   \
          --ignore "src/tests/*"                            \
          --output-path target/debug/coverage-html
        sed -i 's/coverage/grcov/' target/debug/coverage-html/coverage.json
    - name: Archive coverage-html artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-html
        path: target/debug/coverage-html/*
        retention-days: 00
    - name: Generate coverage report for Codecov
      run: |
        grcov                                               \
          target/debug/llvm-profile-files                   \
          iceoryx-sys/target/debug/llvm-profile-files       \
          --binary-path target/debug                        \
          --source-dir .                                    \
          --output-type lcov                                \
          --branch                                          \
          --ignore-not-existing                             \
          --ignore "examples/*"                             \
          --ignore "iceoryx-sys/build.rs"                   \
          --ignore "iceoryx-sys/src/roudi_environment.rs"   \
          --ignore "src/tests/*"                            \
          --output-path target/debug/lcov.info
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: target/debug/lcov.info
        fail_ci_if_error: true
